{"version":3,"file":"index.js","sources":["../src/events/toastMessages.ts","../src/events/events.ts","../src/common/OrderKind.ts","../src/common/chains.ts","../src/themeUtils.ts","../src/fetchDomain.ts"],"sourcesContent":["import { UiOrderType } from './type';\n\nexport enum ToastMessageType {\n    SWAP_ETH_FLOW_SENT_TX = 'SWAP_ETH_FLOW_SENT_TX',\n    ORDER_CREATED = 'ORDER_CREATED',\n    SWAP_SIGNING_ERROR = 'SWAP_SIGNING_ERROR',\n    ORDER_FULFILLED = 'ORDER_FULFILLED',\n    ORDER_CANCELLED = 'ORDER_CANCELLED',\n    ORDER_EXPIRED = 'ORDER_EXPIRED',\n    ORDER_PRESIGNED = 'ORDER_PRESIGNED',\n    ONCHAIN_TRANSACTION_MINED = 'ONCHAIN_TRANSACTION_MINED',\n    ONCHAIN_TRANSACTION_FAILED = 'ONCHAIN_TRANSACTION_FAILED',\n}\n\nexport interface ToastMessagePayloads {\n    [ToastMessageType.SWAP_ETH_FLOW_SENT_TX]: {\n        tx: string;\n    };\n\n    [ToastMessageType.ORDER_CREATED]: {\n        orderUid: string;\n        orderType: UiOrderType;\n        orderCreationHash?: string;\n    };\n\n    [ToastMessageType.SWAP_SIGNING_ERROR]: {\n        type: 'REJECTED' | 'ERROR_SIGNING';\n        errorCode?: number;\n        message: string;\n    };\n\n    [ToastMessageType.ORDER_FULFILLED]: {\n        orderUid: string;\n        orderType: UiOrderType;\n    };\n\n    [ToastMessageType.ORDER_CANCELLED]: {\n        orderUid: string;\n        orderType: UiOrderType;\n    };\n\n    [ToastMessageType.ORDER_EXPIRED]: {\n        orderUid: string;\n        orderType: UiOrderType;\n    };\n\n    [ToastMessageType.ORDER_PRESIGNED]: {\n        orderUid: string;\n        orderType: UiOrderType;\n    };\n\n    [ToastMessageType.ONCHAIN_TRANSACTION_MINED]: {\n        transactionHash: string;\n    };\n\n    [ToastMessageType.ONCHAIN_TRANSACTION_FAILED]: {\n        transactionHash: string;\n    };\n}\n\nexport interface BaseToastMessagePayload<T extends ToastMessageType> {\n    /**\n     * The type of the toast message\n     */\n    messageType: T;\n\n    /**\n     * Plain text message to be displayed.\n     */\n    message: string;\n\n    /**\n     * Additional data to be used to create your own message.\n     */\n    data: ToastMessagePayloads[T];\n}\n\n/**\n * The payload of the `onToastMessage` event.\n *\n * The type is:\n *\n * export type OnToastMessagePayload =\n *     | BaseToastMessagePayload<ToastMessageType.SWAP_ETH_FLOW_SENT_TX>\n *     | BaseToastMessagePayload<ToastMessageType.SWAP_ORDER_CANCELLED>\n *     ... all other toast message types\n *\n * But is defined automatically using some TypeScript magic. To see how we got here, check:\n */\nexport type OnToastMessagePayload = {\n    [K in keyof typeof ToastMessageType]: BaseToastMessagePayload<typeof ToastMessageType[K]>;\n}[keyof typeof ToastMessageType];\n","import { ProviderEventMessage } from 'src/types';\n\nimport {\n    OnFulfilledOrderPayload,\n    OnPostedOrderPayload,\n    OnCancelledOrderPayload,\n    OnExpiredOrderPayload,\n    OnPresignedOrderPayload,\n} from './orders';\nimport { OnToastMessagePayload } from './toastMessages';\nimport { OnTradeParamsPayload } from './trade';\nimport { OnTransactionPayload } from './transactions';\n\nexport enum OkxEvents {\n    ON_TOAST_MESSAGE = 'ON_TOAST_MESSAGE',\n    ON_POSTED_ORDER = 'ON_POSTED_ORDER',\n    ON_FULFILLED_ORDER = 'ON_FULFILLED_ORDER',\n    ON_CANCELLED_ORDER = 'ON_CANCELLED_ORDER',\n    ON_EXPIRED_ORDER = 'ON_EXPIRED_ORDER',\n    ON_PRESIGNED_ORDER = 'ON_PRESIGNED_ORDER',\n    ON_ONCHAIN_TRANSACTION = 'ON_ONCHAIN_TRANSACTION',\n    ON_CHANGE_TRADE_PARAMS = 'ON_CHANGE_TRADE_PARAMS',\n    NO_WALLET_CONNECT = 'NO_WALLET_CONNECT',\n    ON_CONNECT_WALLET = 'ON_CONNECT_WALLET',\n    ON_FROM_CHAIN_CHANGE = 'ON_FROM_CHAIN_CHANGE',\n}\n\n// Define types for event payloads\nexport interface OkxEventPayloadMap {\n    [OkxEvents.ON_TOAST_MESSAGE]: OnToastMessagePayload;\n    [OkxEvents.ON_POSTED_ORDER]: OnPostedOrderPayload;\n    [OkxEvents.ON_FULFILLED_ORDER]: OnFulfilledOrderPayload;\n    [OkxEvents.ON_CANCELLED_ORDER]: OnCancelledOrderPayload;\n    [OkxEvents.ON_EXPIRED_ORDER]: OnExpiredOrderPayload;\n    [OkxEvents.ON_PRESIGNED_ORDER]: OnPresignedOrderPayload;\n    [OkxEvents.ON_ONCHAIN_TRANSACTION]: OnTransactionPayload;\n    [OkxEvents.ON_CHANGE_TRADE_PARAMS]: OnTradeParamsPayload;\n    [OkxEvents.NO_WALLET_CONNECT]: ProviderEventMessage;\n    [OkxEvents.ON_CONNECT_WALLET]: ProviderEventMessage;\n    [OkxEvents.ON_FROM_CHAIN_CHANGE]: ProviderEventMessage;\n}\n\nexport type OkxEventPayloads = OkxEventPayloadMap[OkxEvents];\n","/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\n\n/**\n * Is this order a buy or sell?\n */\nexport enum OrderKind {\n    BUY = 'buy',\n    SELL = 'sell',\n}\n","/**\n * Supported chains and their `chainId` for the SDK.\n * @enum\n */\nexport enum SupportedChainId {\n    MAINNET = 1,\n    GNOSIS_CHAIN = 100,\n    ARBITRUM_ONE = 42161,\n    SEPOLIA = 11155111,\n}\n","import { OkxSwapTheme, OkxSwapWidgetPalette } from './types';\n\nexport function isOkxSwapWidgetPalette(\n    palette: OkxSwapTheme | OkxSwapWidgetPalette | undefined,\n): palette is OkxSwapWidgetPalette {\n    return Boolean(palette && typeof palette === 'object');\n}\n","const domains = [\n  'https://www.okx.com',\n  'https://www.okx.ac',\n];\n\nconst abortSignalTimeout = (ms: number): AbortSignal => {\n  const ctrl = new AbortController();\n  setTimeout(() => ctrl.abort(), ms);\n  return ctrl.signal;\n};\n\nconst checkDomain = (domain: string, timeout = 5000): Promise<void | string> => {\n  if (!domain) {\n    return Promise.resolve();\n  }\n  return fetch(domain, { signal: abortSignalTimeout(timeout) })\n    .then(response => {\n      if (response.ok) {\n        return domain;\n      } else {\n        const nextDomain = domains[domains.indexOf(domain) + 1];\n        return checkDomain(nextDomain, timeout);\n      }\n    })\n    .catch(() => {\n      const nextDomain = domains[domains.indexOf(domain) + 1];\n      return checkDomain(nextDomain, timeout);\n    });\n};\n\n// Start checking domains\nexport function fetchDomain(): Promise<void | string> {\n  return checkDomain(domains[0]);\n}"],"names":["ToastMessageType","OkxEvents","OrderKind","SupportedChainId","isOkxSwapWidgetPalette","palette","domains","abortSignalTimeout","ms","ctrl","checkDomain","domain","timeout","response","nextDomain","fetchDomain"],"mappings":"gIAEY,IAAAA,GAAAA,IACRA,EAAA,sBAAwB,wBACxBA,EAAA,cAAgB,gBAChBA,EAAA,mBAAqB,qBACrBA,EAAA,gBAAkB,kBAClBA,EAAA,gBAAkB,kBAClBA,EAAA,cAAgB,gBAChBA,EAAA,gBAAkB,kBAClBA,EAAA,0BAA4B,4BAC5BA,EAAA,2BAA6B,6BATrBA,IAAAA,GAAA,CAAA,CAAA,ECWAC,GAAAA,IACRA,EAAA,iBAAmB,mBACnBA,EAAA,gBAAkB,kBAClBA,EAAA,mBAAqB,qBACrBA,EAAA,mBAAqB,qBACrBA,EAAA,iBAAmB,mBACnBA,EAAA,mBAAqB,qBACrBA,EAAA,uBAAyB,yBACzBA,EAAA,uBAAyB,yBACzBA,EAAA,kBAAoB,oBACpBA,EAAA,kBAAoB,oBACpBA,EAAA,qBAAuB,uBAXfA,IAAAA,GAAA,CAAA,CAAA,ECNAC,GAAAA,IACRA,EAAA,IAAM,MACNA,EAAA,KAAO,OAFCA,IAAAA,GAAA,CAAA,CAAA,ECHAC,GAAAA,IACRA,EAAAA,EAAA,QAAU,CAAV,EAAA,UACAA,EAAAA,EAAA,aAAe,GAAf,EAAA,eACAA,EAAAA,EAAA,aAAe,KAAf,EAAA,eACAA,EAAAA,EAAA,QAAU,QAAV,EAAA,UAJQA,IAAAA,GAAA,CAAA,CAAA,ECFL,SAASC,EACZC,EAC+B,CAC/B,MAAO,GAAQA,GAAW,OAAOA,GAAY,SACjD,CCNA,MAAMC,EAAU,CACd,sBACA,oBACF,EAEMC,EAAsBC,GAA4B,CAChD,MAAAC,EAAO,IAAI,gBACjB,kBAAW,IAAMA,EAAK,MAAM,EAAGD,CAAE,EAC1BC,EAAK,MACd,EAEMC,EAAc,CAACC,EAAgBC,EAAU,MACxCD,EAGE,MAAMA,EAAQ,CAAE,OAAQJ,EAAmBK,CAAO,EAAG,EACzD,KAAiBC,GAAA,CAChB,GAAIA,EAAS,GACJ,OAAAF,EACF,CACL,MAAMG,EAAaR,EAAQA,EAAQ,QAAQK,CAAM,EAAI,CAAC,EAC/C,OAAAD,EAAYI,EAAYF,CAAO,CACxC,CAAA,CACD,EACA,MAAM,IAAM,CACX,MAAME,EAAaR,EAAQA,EAAQ,QAAQK,CAAM,EAAI,CAAC,EAC/C,OAAAD,EAAYI,EAAYF,CAAO,CAAA,CACvC,EAdM,QAAQ,UAkBZ,SAASG,GAAsC,CAC7C,OAAAL,EAAYJ,EAAQ,CAAC,CAAC,CAC/B"}