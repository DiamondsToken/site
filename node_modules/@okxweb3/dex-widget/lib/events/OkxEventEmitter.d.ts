import { OkxEvents, OkxEventPayloadMap } from '.';
export declare type OkxEventHandler<T extends OkxEvents> = (payload: OkxEventPayloadMap[T]) => void;
export declare type OkxEventListener<T extends OkxEvents> = T extends OkxEvents ? {
    event: T;
    handler: OkxEventHandler<T>;
} : never;
export declare type OkxEventListeners = OkxEventListener<OkxEvents>[];
export interface OkxEventEmitter {
    on(listener: OkxEventListener<OkxEvents>): void;
    off(listener: OkxEventListener<OkxEvents>): void;
    emit<T extends OkxEvents>(event: T, payload: OkxEventPayloadMap[T]): void;
}
export declare class SimpleOkxEventEmitter implements OkxEventEmitter {
    private subscriptions;
    on(listener: OkxEventListener<OkxEvents>): void;
    off(listener: OkxEventListener<OkxEvents>): void;
    emit<T extends OkxEvents>(event: T, payload: OkxEventPayloadMap[T]): void;
}
