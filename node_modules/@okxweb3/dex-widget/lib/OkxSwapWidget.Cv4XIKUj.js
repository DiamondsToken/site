var We = Object.defineProperty;
var Ue = (e, t, r) => t in e ? We(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r;
var p = (e, t, r) => Ue(e, typeof t != "symbol" ? t + "" : t, r);
import { toNumber as xe, isNullish as $e, numberToHex as Ge } from "web3-utils";
import { Transaction as Oe, VersionedTransaction as J } from "@solana/web3.js";
class Me {
  constructor() {
    p(this, "subscriptions", {});
  }
  on(t) {
    const { event: r, handler: n } = t;
    this.subscriptions[r] || (this.subscriptions[r] = []), this.subscriptions[r].push(n);
  }
  off(t) {
    const { event: r, handler: n } = t;
    this.subscriptions[r] && (this.subscriptions[r] = this.subscriptions[r].filter(
      (o) => o !== n
    ));
  }
  emit(t, r) {
    this.subscriptions[t] && this.subscriptions[t].forEach((n) => n(r));
  }
}
const Ne = "okxWidget";
function b(e, t, r) {
  const o = {
    key: Ne,
    method: t,
    ...typeof r == "object" ? r : {}
  };
  e == null || e.postMessage(
    o,
    "*"
  );
}
function L(e, t, r) {
  const n = (o) => {
    !Be(o.data) || o.data.key !== Ne || o.data.method !== t || r(o.data);
  };
  return e.addEventListener("message", n), n;
}
function Be(e) {
  return typeof e == "object" && e !== null && "key" in e && "method" in e && typeof e.key == "string" && typeof e.method == "string";
}
function se(e, t, r) {
  e.removeEventListener("message", r);
}
function we(e, t) {
  e.removeEventListener("message", t);
}
var U = /* @__PURE__ */ ((e) => (e.ACTIVATE = "ACTIVATE", e.UPDATE_HEIGHT = "UPDATE_HEIGHT", e.SET_FULL_HEIGHT = "SET_FULL_HEIGHT", e.EMIT_OKX_EVENT = "EMIT_OKX_EVENT", e.PROVIDER_RPC_REQUEST = "PROVIDER_RPC_REQUEST", e.INTERCEPT_WINDOW_OPEN = "INTERCEPT_WINDOW_OPEN", e.LOAD_READY = "LOAD_READY", e))(U || {}), I = /* @__PURE__ */ ((e) => (e.UPDATE_PARAMS = "UPDATE_PARAMS", e.UPDATE_APP_DATA = "UPDATE_APP_DATA", e.PROVIDER_RPC_RESPONSE = "PROVIDER_RPC_RESPONSE", e.PROVIDER_ON_EVENT = "PROVIDER_ON_EVENT", e.PROVIDER_ON_EVENT_CONNECT = "PROVIDER_ON_EVENT_CONNECT", e.PROVIDER_ONEVENT_WALLET_SATUS = "PROVIDER_ONEVENT_WALLET_SATUS", e.PROVIDER_ONEVENT_WALLET_SOLANA_SATUS = "PROVIDER_ONEVENT_WALLET_SOLANA_SATUS", e.UPDATE_PROVIDER = "UPDATE_PROVIDER", e))(I || {}), F = /* @__PURE__ */ ((e) => (e.PROVIDER_ON_EVENT_CONNECT = "PROVIDER_ON_EVENT_CONNECT", e.PROVIDER_ON_EVENT = "PROVIDER_ON_EVENT", e.PROVIDER_ONEVENT_WALLET_SATUS = "PROVIDER_ONEVENT_WALLET_SATUS", e.NO_WALLET_CONNECT = "NO_WALLET_CONNECT", e))(F || {}), C = /* @__PURE__ */ ((e) => (e.SWAP = "swap", e.BRIDGE = "bridge", e.AUTO = "auto", e))(C || {}), qe = /* @__PURE__ */ ((e) => (e.LIGHT = "light", e.DARK = "dark", e))(qe || {});
const qr = [
  "primary",
  "background",
  "paper",
  "text",
  "danger",
  "warning",
  "alert",
  "info",
  "success"
];
var w = /* @__PURE__ */ ((e) => (e.EVM = "EVM", e.SOLANA = "SOLANA", e.WALLET_CONNECT = "WALLET_CONNECT", e))(w || {});
const Hr = w;
class He {
  constructor(t, r = []) {
    p(this, "eventEmitter", new Me());
    p(this, "listeners", []);
    p(this, "widgetListener");
    this.contentWindow = t, this.updateListeners(r), this.widgetListener = L(
      this.contentWindow,
      U.EMIT_OKX_EVENT,
      (n) => {
        const o = n.payload || (n == null ? void 0 : n.params);
        console.log("eventEmitter:", {
          okxEvent: n,
          event: n.event,
          payload: o
        }), this.eventEmitter.emit(n.event, o);
      }
    );
  }
  stopListeningIframe() {
    we(this.contentWindow, this.widgetListener);
  }
  updateListeners(t) {
    for (const r of this.listeners)
      this.eventEmitter.off(r);
    this.listeners = t || [];
    for (const r of this.listeners)
      this.eventEmitter.on(r);
  }
}
var ye = typeof global == "object" && global && global.Object === Object && global, ze = typeof self == "object" && self && self.Object === Object && self, Ie = ye || ze || Function("return this")(), G = Ie.Symbol, pe = Object.prototype, Ke = pe.hasOwnProperty, Ye = pe.toString, j = G ? G.toStringTag : void 0;
function Xe(e) {
  var t = Ke.call(e, j), r = e[j];
  try {
    e[j] = void 0;
    var n = !0;
  } catch {
  }
  var o = Ye.call(e);
  return n && (t ? e[j] = r : delete e[j]), o;
}
var ke = Object.prototype, Je = ke.toString;
function Qe(e) {
  return Je.call(e);
}
var Ze = "[object Null]", et = "[object Undefined]", oe = G ? G.toStringTag : void 0;
function B(e) {
  return e == null ? e === void 0 ? et : Ze : oe && oe in Object(e) ? Xe(e) : Qe(e);
}
function q(e) {
  return e != null && typeof e == "object";
}
var re = Array.isArray;
function be(e) {
  var t = typeof e;
  return e != null && (t == "object" || t == "function");
}
function tt(e) {
  return e;
}
var rt = "[object AsyncFunction]", nt = "[object Function]", st = "[object GeneratorFunction]", ot = "[object Proxy]";
function at(e) {
  if (!be(e))
    return !1;
  var t = B(e);
  return t == nt || t == st || t == rt || t == ot;
}
function it(e, t) {
  for (var r = -1, n = e == null ? 0 : e.length; ++r < n && t(e[r], r, e) !== !1; )
    ;
  return e;
}
var ct = 9007199254740991, ut = /^(?:0|[1-9]\d*)$/;
function lt(e, t) {
  var r = typeof e;
  return t = t ?? ct, !!t && (r == "number" || r != "symbol" && ut.test(e)) && e > -1 && e % 1 == 0 && e < t;
}
var Et = 9007199254740991;
function Re(e) {
  return typeof e == "number" && e > -1 && e % 1 == 0 && e <= Et;
}
function Pe(e) {
  return e != null && Re(e.length) && !at(e);
}
var ft = Object.prototype;
function dt(e) {
  var t = e && e.constructor, r = typeof t == "function" && t.prototype || ft;
  return e === r;
}
function ht(e, t) {
  for (var r = -1, n = Array(e); ++r < e; )
    n[r] = t(r);
  return n;
}
var Tt = "[object Arguments]";
function ae(e) {
  return q(e) && B(e) == Tt;
}
var Se = Object.prototype, gt = Se.hasOwnProperty, mt = Se.propertyIsEnumerable, _t = ae(/* @__PURE__ */ function() {
  return arguments;
}()) ? ae : function(e) {
  return q(e) && gt.call(e, "callee") && !mt.call(e, "callee");
};
function At() {
  return !1;
}
var Ce = typeof exports == "object" && exports && !exports.nodeType && exports, ie = Ce && typeof module == "object" && module && !module.nodeType && module, Ot = ie && ie.exports === Ce, ce = Ot ? Ie.Buffer : void 0, Nt = ce ? ce.isBuffer : void 0, wt = Nt || At, yt = "[object Arguments]", It = "[object Array]", pt = "[object Boolean]", bt = "[object Date]", Rt = "[object Error]", Pt = "[object Function]", St = "[object Map]", Ct = "[object Number]", Dt = "[object Object]", Vt = "[object RegExp]", Lt = "[object Set]", vt = "[object String]", jt = "[object WeakMap]", Ft = "[object ArrayBuffer]", Wt = "[object DataView]", Ut = "[object Float32Array]", xt = "[object Float64Array]", $t = "[object Int8Array]", Gt = "[object Int16Array]", Mt = "[object Int32Array]", Bt = "[object Uint8Array]", qt = "[object Uint8ClampedArray]", Ht = "[object Uint16Array]", zt = "[object Uint32Array]", h = {};
h[Ut] = h[xt] = h[$t] = h[Gt] = h[Mt] = h[Bt] = h[qt] = h[Ht] = h[zt] = !0;
h[yt] = h[It] = h[Ft] = h[pt] = h[Wt] = h[bt] = h[Rt] = h[Pt] = h[St] = h[Ct] = h[Dt] = h[Vt] = h[Lt] = h[vt] = h[jt] = !1;
function Kt(e) {
  return q(e) && Re(e.length) && !!h[B(e)];
}
function Yt(e) {
  return function(t) {
    return e(t);
  };
}
var De = typeof exports == "object" && exports && !exports.nodeType && exports, W = De && typeof module == "object" && module && !module.nodeType && module, Xt = W && W.exports === De, z = Xt && ye.process, ue = function() {
  try {
    var e = W && W.require && W.require("util").types;
    return e || z && z.binding && z.binding("util");
  } catch {
  }
}(), le = ue && ue.isTypedArray, kt = le ? Yt(le) : Kt, Jt = Object.prototype, Qt = Jt.hasOwnProperty;
function Zt(e, t) {
  var r = re(e), n = !r && _t(e), o = !r && !n && wt(e), s = !r && !n && !o && kt(e), a = r || n || o || s, d = a ? ht(e.length, String) : [], l = d.length;
  for (var u in e)
    Qt.call(e, u) && !(a && // Safari 9 has enumerable `arguments.length` in strict mode.
    (u == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    o && (u == "offset" || u == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    s && (u == "buffer" || u == "byteLength" || u == "byteOffset") || // Skip index properties.
    lt(u, l))) && d.push(u);
  return d;
}
function er(e, t) {
  return function(r) {
    return e(t(r));
  };
}
var tr = er(Object.keys, Object), rr = Object.prototype, nr = rr.hasOwnProperty;
function sr(e) {
  if (!dt(e))
    return tr(e);
  var t = [];
  for (var r in Object(e))
    nr.call(e, r) && r != "constructor" && t.push(r);
  return t;
}
function or(e) {
  return Pe(e) ? Zt(e) : sr(e);
}
function ar(e) {
  return function(t, r, n) {
    for (var o = -1, s = Object(t), a = n(t), d = a.length; d--; ) {
      var l = a[++o];
      if (r(s[l], l, s) === !1)
        break;
    }
    return t;
  };
}
var ir = ar();
function cr(e, t) {
  return e && ir(e, t, or);
}
function ur(e, t) {
  return function(r, n) {
    if (r == null)
      return r;
    if (!Pe(r))
      return e(r, n);
    for (var o = r.length, s = -1, a = Object(r); ++s < o && n(a[s], s, a) !== !1; )
      ;
    return r;
  };
}
var lr = ur(cr);
function Er(e) {
  return typeof e == "function" ? e : tt;
}
function fr(e, t) {
  var r = re(e) ? it : lr;
  return r(e, Er(t));
}
var dr = "[object String]";
function hr(e) {
  return typeof e == "string" || !re(e) && q(e) && B(e) == dr;
}
var Ee = { WIDGET_VERSION: "1", SDK_VERSION: "1.3.11" };
const Tr = "https://www.okx.com", $ = {
  SWAP: "web3/dex-widget",
  BRIDGE: "web3/dex-widget/bridge"
}, H = {
  [w.EVM]: "metamask",
  [w.SOLANA]: "phantom",
  [w.WALLET_CONNECT]: "walletconnect"
}, Ve = 501, fe = (e) => e ? {
  inputChain: e.fromChain,
  outputChain: e.toChain,
  inputCurrency: e.fromToken,
  outputCurrency: e.toToken
} : null;
function gr(e, t, r) {
  const n = fe(t), o = fe(r);
  if (e === C.SWAP)
    return {
      supportTradeType: [C.SWAP],
      route: $.SWAP,
      defaultTokenPair: n,
      formattedTokenPair: n,
      formattedBridgeTokenPair: null
    };
  if (e === C.BRIDGE)
    return {
      supportTradeType: [C.BRIDGE],
      route: $.BRIDGE,
      defaultTokenPair: o,
      formattedTokenPair: null,
      formattedBridgeTokenPair: o
    };
  const s = !n && o, a = s ? $.BRIDGE : $.SWAP, d = s ? o : n;
  return {
    supportTradeType: [C.SWAP, C.BRIDGE],
    route: a,
    defaultTokenPair: d,
    formattedTokenPair: n,
    formattedBridgeTokenPair: o
  };
}
const de = (e) => {
  const {
    baseUrl: t,
    feeConfig: r,
    tokenPair: n,
    bridgeTokenPair: o,
    providerType: s,
    tradeType: a,
    theme: d,
    lang: l,
    chainIds: u,
    extraParams: O
  } = e, y = Ee.WIDGET_VERSION, E = Ee.SDK_VERSION;
  Ir({
    widgetVersion: y,
    feeConfig: r,
    tokenPair: n,
    bridgeTokenPair: o,
    providerType: s
  });
  const {
    supportTradeType: i,
    route: c,
    defaultTokenPair: _,
    formattedTokenPair: T,
    formattedBridgeTokenPair: A
  } = gr(a, n, o), N = {
    tradeType: i,
    theme: d,
    lang: l,
    walletType: H[s],
    widgetVersion: y,
    sdkVersion: E,
    chainIds: u
  }, f = {
    ...N,
    ..._
  }, g = new URLSearchParams();
  for (const v in f)
    if (f.hasOwnProperty(v)) {
      const x = f[v];
      x !== "" && x !== null && x !== void 0 && g.append(v, x);
    }
  const R = g.toString(), P = `${typeof t == "string" ? t : Tr}/${c}?${R}`, S = {
    ...N,
    tokenPair: T,
    bridgeTokenPair: A,
    feeConfig: r,
    providerType: s,
    extraParams: O
  };
  return {
    url: P,
    data: S
  };
}, mr = async (e) => {
  try {
    const t = await e.request({ method: "eth_chainId" }), r = parseInt(t, 16);
    return console.log(`log-requestChainId => decimal number: ${r}`), r;
  } catch (t) {
    return console.error("log-requestChainId => Failed to get chainId:", t), null;
  }
}, _r = async (e) => {
  try {
    const t = await e.request({ method: "eth_accounts" });
    return console.log(`log-requestAddress: ${t.join(",")}`), t[0];
  } catch (t) {
    return console.log("log-requestAddress-Failed to get account:", t), null;
  }
}, Le = (e) => e === w.EVM, Ar = async (e, t) => {
  console.log("log-getChainId-start", e, t);
  let r = null;
  return t === w.EVM && (e != null && e.chainId) && (r = parseInt(e.chainId, 16)), t === w.WALLET_CONNECT && (e != null && e.chainId) && (r = e.chainId), t === w.SOLANA && (r = Ve), r === null && e && Le(t) && (r = await mr(e)), console.log("log-getChainId-end", r), r;
}, Or = async (e, t) => {
  var n, o;
  console.log("log-getAddress-start", e, t);
  let r = null;
  return t === w.EVM && (e != null && e.chainId) && (r = e.selectedAddress), t === w.WALLET_CONNECT && (e != null && e.chainId) && (r = (n = e.accounts) == null ? void 0 : n[0]), !r && e && Le(t) && (r = await _r(e)), t === w.SOLANA && (r = (o = e == null ? void 0 : e.publicKey) == null ? void 0 : o.toBase58()), console.log("log-getAddress-end", r), r;
}, Q = (e) => /^[\x20-\x7E]*$/.test(e), Nr = (e) => {
  try {
    const t = decodeURIComponent(e);
    if (!Q(t))
      throw new Error(`Decoded value contains invalid characters: ${t}`);
    return t;
  } catch (t) {
    throw new Error(`Failed to decode URI component: ${e}. Error: ${t.message}`);
  }
}, wr = (e) => {
  const t = new URL(e), r = new URLSearchParams(t.search), n = {};
  for (const [o, s] of r.entries()) {
    const a = Nr(s);
    n[o] = a;
  }
  return n;
}, Z = (e) => {
  if (console.log("params:", e), hr(e)) {
    if (!Q(e))
      throw new Error(`Invalid string found: ${e}`);
    return !0;
  }
  return be(e) && fr(e, (t, r) => {
    if (!Q(r))
      throw new Error(`Invalid object key found: ${r}`);
    Z(t);
  }), !0;
}, V = {
  INVALID_FEE_CONFIG: "FeeConfig MUST be an object",
  INVALID_FEE_PERCENT: "FeePercent MUST be a number > 0 and <= 3",
  INVALID_TOKEN_PAIR: "Invalid tokenPair",
  INVALID_BRIDGE_TOKEN_PAIR: "Invalid bridgeTokenPair",
  INVALID_PROVIDER_TYPE: "Invalid providerType",
  INVALID_WIDGET_VERSION: "WIDGET_VERSION IS REQUIRED"
}, K = (e) => e !== null && typeof e == "object" && !Array.isArray(e), ve = (e) => !Number.isNaN(Number(e)) && e !== null && e !== void 0 && e !== "" && !Array.isArray(e), Y = (e) => ve(e) && Number(e) > 0 && Number(e) <= 3, yr = (e) => K(e) ? Object.values(e).some((r) => {
  const n = r == null ? void 0 : r.feePercent;
  return K(r == null ? void 0 : r.referrerAddress) ? K(r == null ? void 0 : r.referrerAddress) ? !!Object.values(r == null ? void 0 : r.referrerAddress).some((s) => ve(s.feePercent) ? !Y(s == null ? void 0 : s.feePercent) : !Y(n)) : !1 : !Y(n);
}) ? V.INVALID_FEE_PERCENT : null : V.INVALID_FEE_CONFIG, M = (e) => (typeof e == "string" || typeof e == "number") && Number(e) >= 0, zr = (e) => {
  const t = M(e == null ? void 0 : e.fromChain) && M(e == null ? void 0 : e.toChain);
  return Number(e == null ? void 0 : e.fromChain) === Number(e == null ? void 0 : e.toChain) && t;
}, he = (e) => M(e == null ? void 0 : e.fromChain) && M(e == null ? void 0 : e.toChain), Ir = ({ widgetVersion: e, feeConfig: t = {}, tokenPair: r, bridgeTokenPair: n, providerType: o }) => {
  const s = H[o];
  if (!e)
    throw new Error(V.INVALID_WIDGET_VERSION);
  if (o && !s)
    throw new Error(V.INVALID_PROVIDER_TYPE);
  if (r && !he(r))
    throw new Error(V.INVALID_TOKEN_PAIR);
  if (n && !he(n))
    throw new Error(V.INVALID_BRIDGE_TOKEN_PAIR);
  const a = yr(t);
  if (a)
    throw new Error(a);
  return !0;
};
function pr(e) {
  const t = { ...e };
  return (e.gas || e.gasLimit) && (t.gas = xe(e.gas ?? e.gasLimit)), (e.maxPriorityFeePerGas || e.maxFeePerGas) && delete t.gasPrice, ["gasPrice", "gas", "value", "maxPriorityFeePerGas", "maxFeePerGas", "nonce", "chainId"].filter((r) => !$e(t[r])).forEach((r) => {
    t[r] = Ge(t[r]);
  }), t;
}
class br {
  constructor(t) {
    p(this, "iframeWindow");
    this.iframeWindow = t;
  }
  async processTransaction(t, r, n, o, s, a) {
    var l, u;
    const d = { method: t, id: Number(r), params: o };
    try {
      if ((s == null ? void 0 : s.selectedAddress) || ((l = s == null ? void 0 : s.accounts) == null ? void 0 : l[0]) || await s.request({
        method: "eth_requestAccounts",
        id: Date.now(),
        params: []
      }), t === "eth_sendTransaction") {
        const y = pr(o[0]), E = { method: t, id: Number(r), params: [y] };
        console.log("eth_sendTransaction requestPara.params[0]", { requestPara: d, requestPayload: E });
        const i = await ((u = s == null ? void 0 : s.request) == null ? void 0 : u.call(s, E));
        console.log("provider.request===>", i), b(this.iframeWindow, I.PROVIDER_ON_EVENT, {
          id: r,
          mode: "iframe",
          data: i,
          path: n,
          type: a,
          error: null,
          success: !0
        });
      } else {
        const y = await s.request(d);
        console.log("sent evm transaction request:", y), b(this.iframeWindow, I.PROVIDER_ON_EVENT, {
          id: r,
          mode: "iframe",
          data: y,
          path: n,
          type: a,
          success: !0
        });
      }
    } catch (O) {
      console.error("EVM Error:", O), b(this.iframeWindow, I.PROVIDER_ON_EVENT, {
        id: r,
        mode: "iframe",
        error: O && JSON.stringify(O),
        path: n,
        type: a,
        success: !1
      });
    }
  }
  onProviderEvent(t, r) {
    b(this.iframeWindow, I.PROVIDER_ONEVENT_WALLET_SATUS, {
      event: t,
      params: r
    });
  }
  registerProviderEventListeners(t) {
    [
      "connect",
      "disconnect",
      "close",
      "chainChanged",
      "accountsChanged"
    ].forEach((n) => {
      t.on(n, (o) => {
        this.onProviderEvent(n, o);
      });
    });
  }
}
function Rr(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function Pr(e) {
  if (e.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), r = 0; r < t.length; r++)
    t[r] = 255;
  for (var n = 0; n < e.length; n++) {
    var o = e.charAt(n), s = o.charCodeAt(0);
    if (t[s] !== 255)
      throw new TypeError(o + " is ambiguous");
    t[s] = n;
  }
  var a = e.length, d = e.charAt(0), l = Math.log(a) / Math.log(256), u = Math.log(256) / Math.log(a);
  function O(i) {
    if (i instanceof Uint8Array || (ArrayBuffer.isView(i) ? i = new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : Array.isArray(i) && (i = Uint8Array.from(i))), !(i instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (i.length === 0)
      return "";
    for (var c = 0, _ = 0, T = 0, A = i.length; T !== A && i[T] === 0; )
      T++, c++;
    for (var N = (A - T) * u + 1 >>> 0, f = new Uint8Array(N); T !== A; ) {
      for (var g = i[T], R = 0, m = N - 1; (g !== 0 || R < _) && m !== -1; m--, R++)
        g += 256 * f[m] >>> 0, f[m] = g % a >>> 0, g = g / a >>> 0;
      if (g !== 0)
        throw new Error("Non-zero carry");
      _ = R, T++;
    }
    for (var P = N - _; P !== N && f[P] === 0; )
      P++;
    for (var S = d.repeat(c); P < N; ++P)
      S += e.charAt(f[P]);
    return S;
  }
  function y(i) {
    if (typeof i != "string")
      throw new TypeError("Expected String");
    if (i.length === 0)
      return new Uint8Array();
    for (var c = 0, _ = 0, T = 0; i[c] === d; )
      _++, c++;
    for (var A = (i.length - c) * l + 1 >>> 0, N = new Uint8Array(A); i[c]; ) {
      var f = t[i.charCodeAt(c)];
      if (f === 255)
        return;
      for (var g = 0, R = A - 1; (f !== 0 || g < T) && R !== -1; R--, g++)
        f += a * N[R] >>> 0, N[R] = f % 256 >>> 0, f = f / 256 >>> 0;
      if (f !== 0)
        throw new Error("Non-zero carry");
      T = g, c++;
    }
    for (var m = A - T; m !== A && N[m] === 0; )
      m++;
    for (var P = new Uint8Array(_ + (A - m)), S = _; m !== A; )
      P[S++] = N[m++];
    return P;
  }
  function E(i) {
    var c = y(i);
    if (c)
      return c;
    throw new Error("Non-base" + a + " character");
  }
  return {
    encode: O,
    decodeUnsafe: y,
    decode: E
  };
}
var Sr = Pr;
const Cr = Sr, Dr = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var Vr = Cr(Dr);
const D = /* @__PURE__ */ Rr(Vr), Lr = (e) => {
  try {
    return Oe.from(D.decode(e));
  } catch {
    const r = J.deserialize(
      D.decode(e)
    );
    return console.log("new version deserializeTransaction:", r), r;
  }
};
class Te {
  constructor(t) {
    p(this, "iframeWindow");
    this.iframeWindow = t;
  }
  async processTransaction(t, r, n, o, s, a) {
    var d, l, u, O, y;
    try {
      const E = Array.isArray(o) ? o : [o], i = E[0], c = (d = E[0]) == null ? void 0 : d.onlyIfTrusted, _ = (l = E[0]) == null ? void 0 : l.okxArgs, T = (u = E[0]) == null ? void 0 : u.transaction, A = (O = E[0]) == null ? void 0 : O.type;
      if (t === "signAllTransactions") {
        const f = E.map(Lr);
        console.log("solana signAllTransactions newParams:", f);
        const g = await s[t](f), R = g.map((m) => {
          const P = (m == null ? void 0 : m.signature) || (m == null ? void 0 : m.signatures[0]), S = D.encode(P), v = D.encode(m.serialize());
          return { signature: S, serializedTransaction: v };
        });
        console.log("solana signAllTransactions request:", g, R), b(this.iframeWindow, I.PROVIDER_ON_EVENT, {
          id: r,
          mode: "iframe",
          data: R,
          path: n,
          type: a,
          success: !0
        });
        return;
      }
      if (c) {
        b(this.iframeWindow, I.PROVIDER_ON_EVENT, {
          id: r,
          mode: "iframe",
          data: {
            onlyIfTrusted: !0
          },
          path: n,
          type: a,
          success: !0
        });
        return;
      }
      if (typeof i == "string")
        try {
          const f = Oe.from(D.decode(i));
          E[0] = f;
        } catch {
          const g = J.deserialize(
            D.decode(i)
          );
          console.log("new version deserializeTransaction:", g), E[0] = g;
        }
      if (_ && A && T) {
        const f = J.deserialize(
          D.decode(T)
        ), g = (y = E[0]) == null ? void 0 : y.options;
        E[0] = f, E[1] = g, E[2] = _;
      }
      const N = await s[t](...E);
      console.log("solana request:", N), b(this.iframeWindow, I.PROVIDER_ON_EVENT, {
        id: r,
        mode: "iframe",
        data: N,
        path: n,
        type: a,
        success: !0
      });
    } catch (E) {
      console.error("Solana Error:", E), b(this.iframeWindow, I.PROVIDER_ON_EVENT, {
        id: r,
        mode: "iframe",
        error: JSON.stringify(E),
        path: n,
        type: a,
        success: !1
      });
    }
  }
  onProviderEvent(t, r) {
    const n = r == null ? void 0 : r.toBase58();
    b(
      this.iframeWindow,
      I.PROVIDER_ONEVENT_WALLET_SOLANA_SATUS,
      {
        event: t,
        params: {
          address: n,
          chainId: Ve,
          walletType: H.SOLANA
        }
      }
    );
  }
  registerProviderEventListeners(t) {
    ["connect", "disconnect", "accountChanged"].forEach((n) => {
      t.on(n, (o) => {
        this.onProviderEvent(n, o);
      });
    });
  }
  async processConnectEvent(t, r) {
    const { id: n, mode: o, params: s, path: a, type: d } = t || {
      params: null,
      mode: null,
      id: null,
      path: null,
      type: null
    };
    try {
      if (!r || o === "iframe")
        throw new Error("No Provider");
      const { method: l } = s[0] || { method: null };
      if (d === "solana" && l === "connect") {
        const u = r;
        if (!(u != null && u.connect)) throw new Error("Not solana provider");
        u.connect().then((O) => {
          b(
            this.iframeWindow,
            I.PROVIDER_ON_EVENT_CONNECT,
            {
              id: n,
              mode: "iframe",
              data: O.publicKey.toBase58(),
              path: a,
              type: d,
              success: !0
            }
          );
        }).catch((O) => {
          b(
            this.iframeWindow,
            I.PROVIDER_ON_EVENT_CONNECT,
            {
              id: n,
              mode: "iframe",
              error: JSON.stringify(O),
              path: a,
              type: d,
              success: !1
            }
          );
        });
      }
    } catch (l) {
      b(this.iframeWindow, I.PROVIDER_ON_EVENT_CONNECT, {
        id: n,
        mode: "iframe",
        error: JSON.stringify(l),
        path: a,
        type: d,
        success: !1
      });
    }
  }
}
class vr {
  constructor(t, r) {
    p(this, "strategy");
    switch (t) {
      case w.SOLANA:
        this.strategy = new Te(r);
        break;
      case w.WALLET_CONNECT:
      case w.EVM:
        this.strategy = new br(r);
        break;
      default:
        throw new Error("Unsupported provider type or network error", t);
    }
  }
  setStrategy(t) {
    this.strategy = t;
  }
  async processTransaction(t, r, n, o, s, a) {
    console.log("processTransaction:", { method: t, id: r, path: n, requestArgs: o, provider: s, type: a }), await this.strategy.processTransaction(t, r, n, o, s, a);
  }
  registerProviderEventListeners(t) {
    this.strategy.registerProviderEventListeners(t);
  }
  async processConnectEvent(t, r) {
    this.strategy instanceof Te && (console.log("processConnectEvent:", this.strategy, { provider: r }), await this.strategy.processConnectEvent(t, r));
  }
}
class jr {
  /**
   * Creates an instance of IframeRpcProviderBridge.
   * @param iframeWindow - The iFrame window that will post up general RPC messages and to which the IframeRpcProviderBridge will forward the RPC result.
   *  Also it will receive some special RPC events coming from the wallet, like connect/chainChanged,accountChanged
   */
  constructor(t, r) {
    /**
     * The Ethereum provider instance.
     * When is null the JSON-RPC bridge is disconnected from the Ethereum provider.
     * */
    p(this, "provider", null);
    /** Listener for Ethereum provider events */
    p(this, "processor");
    p(this, "listener");
    p(this, "connectListener");
    /**
     * Process provider events coming from the window (from iFrame).
     */
    p(this, "processProviderEventFromWindow", async (t) => {
      console.log("processProviderEventFromWindow:", t);
      const { type: r } = t, { method: n, params: o } = t.params[0];
      await this.processor.processTransaction(
        n,
        t.id,
        t.path,
        o,
        this.provider,
        r
      );
    });
    /**
     * Process connect event for Solana
     */
    p(this, "processConnectEvent", async (t) => {
      await this.processor.processConnectEvent(t, this.provider);
    });
    this.iframeWindow = t, this.processor = new vr(r, this.iframeWindow);
  }
  disconnect() {
    this.provider = null, se(
      window,
      F.PROVIDER_ON_EVENT,
      this.listener
    ), se(
      window,
      F.PROVIDER_ON_EVENT_CONNECT,
      this.connectListener
    );
  }
  onConnect(t) {
    this.provider ? this.disconnect() : (console.log("onConnect====>"), this.listener = L(
      window,
      F.PROVIDER_ON_EVENT,
      this.processProviderEventFromWindow
    ), this.connectListener = L(
      window,
      F.PROVIDER_ON_EVENT_CONNECT,
      this.processConnectEvent
    )), this.provider = t, this.processor.registerProviderEventListeners(t);
  }
}
const ee = "480px", je = 450, ge = 375;
function Fe(e, t) {
  Fr(e, t.width);
}
const ne = function() {
  const e = Date.now().toString();
  return function() {
    return {
      id: e,
      defaultClassName: `default-widget-iframe-${e}`,
      specifiedClassName: `specified-widget-iframe-${e}`
    };
  };
}();
function me(e, {
  defaultClassName: t,
  specifiedClassName: r,
  width: n
}) {
  e.innerHTML = "", e.innerHTML = `
        .${t} {
            width: ${je}px;
            min-height: ${ee};
            border: none;
        }
        @media (max-width: 767px) {
            .${t} {
                width: 100%;
            }
        }
        .${r} {
            width: ${n}px;
            min-height: ${ee};
            border: none;
        }
    `;
}
function _e(e) {
  const { id: t, defaultClassName: r, specifiedClassName: n } = ne(), o = document.getElementById(t);
  if (o)
    return me(o, {
      defaultClassName: r,
      specifiedClassName: n,
      width: e
    }), o;
  const s = document.createElement("style");
  return me(s, { defaultClassName: r, specifiedClassName: n, width: e }), s.id = t, document.head.appendChild(s), s;
}
function Fr(e, t) {
  const r = Number(t), { defaultClassName: n, specifiedClassName: o } = ne();
  r ? (_e(r < ge ? ge : r), e.className = o) : (_e(je), e.className = n);
}
function Wr() {
  const { id: e } = ne(), t = document.getElementById(e);
  t && t.parentNode.removeChild(t);
}
const X = async (e, t) => ({
  providerType: t,
  walletType: H[t],
  chainId: await Ar(e, t),
  address: await Or(e, t)
});
function Kr(e, t) {
  console.log("createOkxSwapWidget====>", e, t);
  const { params: r, provider: n, listeners: o } = t;
  let s = n, { data: a, url: d } = de(r);
  const l = Ur(r, d);
  e.innerHTML = "", e.appendChild(l);
  const { contentWindow: u } = l;
  if (!u)
    throw console.error("Iframe does not contain a window", l), new Error("Iframe does not contain a window!");
  const O = [], y = async () => {
    const c = await X(s, a.providerType);
    console.log("updateProviderEmitEvent====>dex-ready", c, s), k(u, c, s);
  };
  O.push(
    ...xr(l, r.height),
    $r(u, a, y)
  );
  const E = new He(window, o);
  let i = Ae(u, null, s, r.providerType);
  return l.addEventListener("load", () => {
    console.log("updateParams====>load", s, a), te(u, a), X(
      s,
      a.providerType
    ).then((c) => {
      console.log("updateProviderEmitEvent====>load-success", c, s), k(u, c, s);
    }).catch((c) => {
      console.log("updateProviderEmitEvent====>load-error", s, c);
    });
  }), {
    updateParams: (c) => {
      const { width: _, lang: T, theme: A, extraParams: N } = c;
      Fe(l, { width: _ });
      const f = {
        ...r,
        lang: T,
        theme: A,
        extraParams: N
      };
      a = de(f).data, Z(a), console.log("updateParams====>updateParamsFunction", s, r), te(u, a);
    },
    updateListeners: (c) => E.updateListeners(c),
    updateProvider: async (c, _) => {
      var A;
      Z(_), i == null || i.disconnect(), (A = s == null ? void 0 : s.removeAllListeners) == null || A.call(s), s = c;
      const T = await X(s, _);
      a = { ...a, ...T }, i = Ae(
        u,
        i,
        c,
        _
      ), console.log("updateProvider====>updateProviderFunction", c, _), k(u, T, s);
    },
    destroy: () => {
      i == null || i.disconnect(), E.stopListeningIframe(), O.forEach((c) => window.removeEventListener("message", c));
      try {
        e.removeChild(l);
      } catch (c) {
        console.error("Error removing iframe, maybe iframe is removed", c);
      }
      Wr();
    },
    iframeWindow: u
  };
}
function Ae(e, t, r, n) {
  if (!r)
    return;
  if (!Object.values(w).includes(n))
    throw new Error("providerType is required");
  console.log("updateProvider iframeRpcProviderBridge===>", t), t && t.disconnect();
  const s = new jr(e, n);
  return r && s.onConnect(r), s;
}
function Ur(e, t) {
  const { width: r } = e, n = document.createElement("iframe");
  return wr(t), n.src = t, Fe(n, { width: r }), n.scrolling = "no", n.style.border = "none", n;
}
function k(e, t, r) {
  const n = !!r;
  console.trace("updateProviderEmitEvent", t, r), b(
    e,
    I.UPDATE_PROVIDER,
    {
      appParams: t,
      hasProvider: n
    }
  );
}
function te(e, t) {
  console.log("updateParams====>end", t, e), b(e, I.UPDATE_PARAMS, {
    appParams: t
  });
}
function xr(e, t = ee) {
  return [
    L(window, U.UPDATE_HEIGHT, (r) => {
      e.style.height = r.height ? `${r.height}px` : t, e.style.minHeight = r.height ? `${r.height}px` : t;
    }),
    L(window, U.SET_FULL_HEIGHT, ({ isUpToSmall: r }) => {
      e.style.height = r ? t : `${document.body.offsetHeight}px`, e.style.minHeight = r ? t : `${document.body.offsetHeight}px`;
    })
  ];
}
function $r(e, t, r) {
  const n = L(window, U.LOAD_READY, () => {
    console.log("updateParams=====>dex-ready", e, t), te(e, t), r(), we(window, n);
  });
  return n;
}
export {
  Or as A,
  Q as B,
  Hr as C,
  Nr as D,
  V as E,
  wr as F,
  Z as G,
  w as P,
  Me as S,
  C as T,
  U as W,
  we as a,
  I as b,
  Kr as c,
  F as d,
  qe as e,
  qr as f,
  ve as g,
  yr as h,
  K as i,
  M as j,
  zr as k,
  L as l,
  he as m,
  Ir as n,
  $ as o,
  b as p,
  H as q,
  Ve as r,
  se as s,
  pr as t,
  fe as u,
  Y as v,
  gr as w,
  de as x,
  Le as y,
  Ar as z
};
//# sourceMappingURL=OkxSwapWidget.Cv4XIKUj.js.map
