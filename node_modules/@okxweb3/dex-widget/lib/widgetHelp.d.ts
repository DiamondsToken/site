import { TradeType, IWidgetParams, ITokenPair, TWalletTypeRecord, ProviderType, IFormattedTokenPair, IFormattedWidgetProps } from './types';
export declare const WIDGET_ROUTE_CONSTANTS: {
    SWAP: string;
    BRIDGE: string;
};
export declare const WALLET_TYPE: TWalletTypeRecord;
export declare const SOLANA_CHAIN_ID = 501;
export declare const formatTokenPair: (tokenPair?: ITokenPair) => IFormattedTokenPair;
export declare function formatDefaultConfig(tradeType: TradeType, tokenPair?: ITokenPair, bridgeTokenPair?: ITokenPair): {
    supportTradeType: TradeType[];
    route: string;
    defaultTokenPair?: IFormattedTokenPair;
    formattedTokenPair?: IFormattedTokenPair;
    formattedBridgeTokenPair?: IFormattedTokenPair;
};
export declare const createWidgetParams: (widgetParams: IWidgetParams) => IFormattedWidgetProps;
export declare const isEvmProvider: (providerType: ProviderType) => boolean;
export declare const getChainId: (provider: any, providerType: ProviderType) => Promise<any>;
export declare const getAddress: (provider: any, providerType: ProviderType) => Promise<any>;
/**
 * Checks if a decoded URI component contains valid printable characters
 * @param {string} str - The decoded string to check
 * @returns {boolean} - Returns true if the string is valid, false if it contains "garbage" characters
 */
export declare const isPrintableString: (str: string) => boolean;
/**
 * Safely decodes a URI component, checking if it contains printable characters
 * @param {string} value - The URI component to decode
 * @returns {string} - The decoded value, or throws an error if the decoded value contains garbage characters
 */
export declare const safeDecodeURIComponent: (value: string) => string;
/**
 * Checks if all URL parameters are valid, and stops on the first invalid one
 * @param {string} url - The URL string to check
 * @returns An object containing valid parameters, or throws an error if any parameter is invalid
 */
export declare const checkUrlParam: (url: string) => Record<string, string>;
/**
 * Recursively validates the given parameters.
 * If the value is a string, it checks if it's printable.
 * If the value is an object, it recursively checks each key-value pair.
 *
 * @param params - The object or string to validate
 * @throws {Error} If any parameter is invalid or contains illegal characters
 * @returns {boolean} - Returns true if all parameters are valid
 */
export declare const validateWidgetParams: (params: any) => boolean;
