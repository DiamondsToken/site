import { WidgetMethodsEmit, WidgetMethodsEmitPayloadMap, WidgetMethodsListen, WidgetMethodsListenPayloadMap, WidgetProviderEventPayloadMap, WidgetProviderEvents } from './types';
export declare function postMessageToWindow<T extends WidgetMethodsEmit>(contentWindow: Window, method: T, payload: WidgetMethodsEmitPayloadMap[T]): void;
export declare function postMessageToWindow<T extends WidgetMethodsListen>(contentWindow: Window, method: T, payload: WidgetMethodsListenPayloadMap[T]): void;
export declare function postMessageToWindow<T extends WidgetProviderEvents>(contentWindow: Window, method: T, payload: WidgetProviderEventPayloadMap[T]): void;
export declare type WindowListener = (event: MessageEvent<unknown>) => void;
export declare function listenToMessageFromWindow<T extends WidgetMethodsListen>(contentWindow: Window, method: T, callback: (payload: WidgetMethodsListenPayloadMap[T]) => void): WindowListener;
export declare function listenToMessageFromWindow<T extends WidgetMethodsEmit>(contentWindow: Window, method: T, callback: (payload: WidgetMethodsEmitPayloadMap[T]) => void): WindowListener;
export declare function listenToMessageFromWindow<T extends WidgetProviderEvents>(contentWindow: Window, method: T, callback: (payload: WidgetProviderEventPayloadMap[T]) => void): WindowListener;
export declare function stopListeningToMessageFromWindow<T extends WidgetMethodsListen>(contentWindow: Window, method: T, callback: (payload: WidgetMethodsListenPayloadMap[T]) => void): void;
export declare function stopListeningToMessageFromWindow<T extends WidgetMethodsEmit>(contentWindow: Window, method: T, callback: (payload: WidgetMethodsEmitPayloadMap[T]) => void): void;
export declare function stopListeningToMessageFromWindow<T extends WidgetProviderEvents>(contentWindow: Window, _method: string, callback: (payload: WidgetProviderEventPayloadMap[T]) => void): void;
export declare function stopListeningWindowListener(contentWindow: Window, callback: WindowListener): void;
